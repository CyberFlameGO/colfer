// This file was generated by colf(1); DO NOT EDIT
// The compiler used schema file test.colf.

#include "Colfer.h"

#include <climits>
#include <string>
#include <vector>

static_assert(CHAR_BIT == 8, "octet addressable");
static_assert(sizeof(float) == 4, "float IEEE754 size");
static_assert(sizeof(double) == 8, "double IEEE754 size");

constexpr uint_fast8_t c8(uint8_t x) { return uint_fast8_t(x); }
constexpr uint_fast16_t c16(uint16_t x) { return uint_fast16_t(x); }
constexpr uint_fast32_t c32(uint32_t x) { return uint_fast32_t(x); }
constexpr uint_fast64_t c64(uint64_t x) { return uint_fast64_t(x); }


std::size_t gen::colfer_size_max = 16 * 1024 * 1024;

std::size_t gen::colfer_list_max = 16 * 1024 * 1024;

std::size_t gen::O::marshal_len() const {
	size_t l(1);

	if (this->b) l++;

	{
		uint_fast32_t x(this->u32);
		if (x) {
			if (x >= c32(1) << 21) l += 5;
			else for (l += 2; x > c32(127); x >>= 7, ++l);
		}
	}

	{
		uint_fast64_t x(this->u64);
		if (x) {
			if (x >= c64(1) << 49) l += 9;
			else for (l += 2; x > c64(127); x >>= 7, ++l);
		}
	}

	{
		uint_fast32_t x(this->i32);
		if (x) {
			if (x & c32(1) << 31) {
				x = ~x;
				++x;
			}
			for (l += 2; x > c32(127); x >>= 7, ++l);
		}
	}

	{
		uint_fast64_t x(this->i64);
		if (x) {
			if (x & c64(1) << 63) {
				x = ~x;
				++x;
			}
			auto max = l + 10;
			for (l += 2; x > c64(127) && l < max; x >>= 7, ++l);
		}
	}

	if (this->f32 != 0.0f) l += 5;

	if (this->f64 != 0.0) l += 9;

	{
		auto t = this->t.count();
		if (t) {
			const auto overflow = std::chrono::nanoseconds::rep((1LL << 32) * 1000000000);
			l += t < 0 || t >= overflow ? 13 : 9;
		}
	}

	if (!this->s.empty()) {
		auto n = this->s.size();
		l += n;
		for (l += 2; n > std::string::size_type(127); n >>= 7, ++l);
	}

	if (!this->a.empty()) {
		auto n = this->a.size();
		l += n;
		for (l += 2; n > std::vector<std::uint8_t>::size_type(127); n >>= 7, ++l);
	}

	if (this->o) {
		l++;
		l += this->o->marshal_len();
	}

	if (!this->os.empty()) {
		auto n = this->os.size();
		for (l += 2; n > std::vector<O>::size_type(127); n >>= 7, ++l);
		for (const O& x : this->os) l += x.marshal_len();
	}

	if (!this->ss.empty()) {
		auto n = this->ss.size();
		for (l += 2; n > std::vector<std::string>::size_type(127); n >>= 7, ++l);

		for (auto s : this->ss) {
			auto n = s.size();
			l += n;
			for (l++; n > std::string::size_type(128); n >>= 7, ++l);
		}
	}

	if (!this->as.empty()) {
		auto n = this->as.size();
		for (l += 2; n > std::vector<std::vector<std::uint8_t> >::size_type(127); n >>= 7, ++l);

		for (auto a : this->as) {
			auto n = a.size();
			l += n;
			for (l ++; n > std::vector<std::uint8_t>::size_type(127); n >>= 7, ++l);
		}
	}

	if (this->u8) l += 2;

	{
		uint_fast16_t x(this->u16);
		if (x) l += x & c16(0xff00) ? 3 : 2;
	}

	if (!this->f32s.empty()) {
		auto n = this->f32s.size();
		l += n * 4;
		for (l += 2; n > std::vector<float>::size_type(127); n >>= 7, ++l);
	}

	if (!this->f64s.empty()) {
		auto n = this->f64s.size();
		l += n * 8;
		for (l += 2; n > std::vector<double>::size_type(127); n >>= 7, ++l);
	}

	return l;
}

std::size_t gen::O::marshal(void* buf) const {
	// octet pointer navigation
	auto i = reinterpret_cast<uint8_t*>(buf);
	const auto offset = i;

	if (this->b) {
		*i++ = uint8_t(0);
	}

	{
		uint_fast32_t x(this->u32);
		if (x) {
			if (x < c32(1) << 21) {
				*i++ = uint8_t(1);
				while (x >= c32(128)) {
					*i++ = x | c32(128);
					x >>= 7;
				}
				*i++ = x;
			} else {
				*i++ = uint8_t(1 | 128);
				*i++ = x >> 24;
				*i++ = x >> 16;
				*i++ = x >> 8;
				*i++ = x;
			}
		}
	}

	{
		uint_fast64_t x(this->u64);
		if (x) {
			if (x < c64(1) << 49) {
				*i++ = uint8_t(2);
				while (x >= c64(128)) {
					*i++ = x | c64(128);
					x >>= 7;
				}
				*i++ = x;
			} else {
				*i++ = uint8_t(2 | 128);
				*i++ = x >> 56;
				*i++ = x >> 48;
				*i++ = x >> 40;
				*i++ = x >> 32;
				*i++ = x >> 24;
				*i++ = x >> 16;
				*i++ = x >> 8;
				*i++ = x;
			}
		}
	}

	{
		uint_fast32_t x(this->i32);
		if (x) {
			if (x & (c32(1) << 31)) {
				*i++ = uint8_t(3 | 128);
				x = ~x + 1;
			} else	*i++ = uint8_t(3);

			while (x >= c32(128)) {
				*i++ = x | c32(128);
				x >>= 7;
			}
			*i++ = x;
		}
	}

	{
		uint_fast64_t x(this->i64);
		if (x) {
			if (x & (c64(1) << 63)) {
				*i++ = uint8_t(4 | 128);
				x = ~x + 1;
			} else	*i++ = uint8_t(4);

			for (int n = 0; x >= c64(128) && n < 8; ++n) {
				*i++ = x | c64(128);
				x >>= 7;
			}
			*i++ = x;
		}
	}

	if (this->f32 != 0.0f) {
		*i++ = uint8_t(5);

		uint_fast32_t x;
		std::memcpy(&x, &this->f32, 4);
		*i++ = x >> 24;
		*i++ = x >> 16;
		*i++ = x >> 8;
		*i++ = x;
	}

	if (this->f64 != 0.0) {
		*i++ = uint8_t(6);

		uint_fast64_t x;
		std::memcpy(&x, &this->f64, 8);
		*i++ = x >> 56;
		*i++ = x >> 48;
		*i++ = x >> 40;
		*i++ = x >> 32;
		*i++ = x >> 24;
		*i++ = x >> 16;
		*i++ = x >> 8;
		*i++ = x;
	}

	{
		const auto n = this->t.count();
		if (n) {
			uint64_t s(int64_t(std::chrono::duration_cast<std::chrono::seconds>(this->t).count()));
			uint_fast32_t ns(n % std::chrono::nanoseconds::rep(1000000000));

			if (n < std::chrono::nanoseconds::rep(0)) {
				*i++ = uint8_t(7 | 128);

				if (ns) {
					ns = c32(1000000000) - (~ns + 1);
					--s;
				}

				*i++ = s >> 56;
				*i++ = s >> 48;
				*i++ = s >> 40;
				*i++ = s >> 32;
			} else if (s < c64(1) << 32) {
				*i++ = uint8_t(7);
			} else {
				*i++ = uint8_t(7 | 128);

				*i++ = s >> 56;
				*i++ = s >> 48;
				*i++ = s >> 40;
				*i++ = s >> 32;
			}

			*i++ = s >> 24;
			*i++ = s >> 16;
			*i++ = s >> 8;
			*i++ = s;

			*i++ = ns >> 24;
			*i++ = ns >> 16;
			*i++ = ns >> 8;
			*i++ = ns;
		}
	}

	if (!this->s.empty()) {
		*i++ = uint8_t(8);
		auto n = this->s.size();

		uint_fast32_t x(n);
		while (x >= c32(128)) {
			*i++ = x | c32(128);
			x >>= 7;
		}
		*i++ = x;

		std::memcpy(i, &this->s[0], n);
		i += n;
	}

	if (!this->a.empty()) {
		*i++ = uint8_t(9);
		auto n = this->a.size();

		uint_fast32_t x(n);
		while (x >= c32(128)) {
			*i++ = x | c32(128);
			x >>= 7;
		}
		*i++ = x;

		std::memcpy(i, &this->a[0], n);
		i += n;
	}

	if (this->o) {
		*i++ = uint8_t(10);
		i += this->o->marshal(i);
	}

	if (!this->os.empty()) {
		*i++ = uint8_t(11);

		uint_fast32_t x(this->os.size());
		while (x >= c32(128)) {
			*i++ = x | c32(128);
			x >>= 7;
		}
		*i++ = x;

		for (const O& x : this->os) i += x.marshal(i);
	}

	if (!this->ss.empty()) {
		*i++ = uint8_t(12);

		uint_fast32_t x(this->ss.size());
		while (x >= c32(128)) {
			*i++ = x | c32(128);
			x >>= 7;
		}
		*i++ = x;

		for (auto s : this->ss) {
			auto n = s.size();

			x = n;
			while (x >= c32(128)) {
				*i++ = x | c32(128);
				x >>= 7;
			}
			*i++ = x;

			std::memcpy(i, &s[0], n);
			i += n;
		}
	}

	if (!this->as.empty()) {
		*i++ = uint8_t(13);

		uint_fast32_t x(this->as.size());
		while (x >= c32(128)) {
			*i++ = x | c32(128);
			x >>= 7;
		}
		*i++ = x;

		for (auto a : this->as) {
			auto n = a.size();

			x = n;
			while (x >= c32(128)) {
				*i++ = x | c32(128);
				x >>= 7;
			}
			*i++ = x;

			std::memcpy(i, &a[0], n);
			i += n;
		}
	}

	if (this->u8) {
		*i++ = uint8_t(14);
		*i++ = this->u8;
	}

	{
		uint_fast16_t x(this->u16);
		if (x) {
			if (x < c16(256)) {
				*i++ = uint8_t(15 | 0x80);
				*i++ = x;
			} else {
				*i++ = uint8_t(15);
				*i++ = x >> 8;
				*i++ = x;
			}
		}
	}

	if (!this->f32s.empty()) {
		*i++ = uint8_t(16);

		uint_fast32_t x(this->f32s.size());
		while (x >= c32(128)) {
			*i++ = x | c32(128);
			x >>= 7;
		}
		*i++ = x;

		for (auto f : this->f32s) {
			std::memcpy(&x, &f, 4);
			*i++ = x >> 24;
			*i++ = x >> 16;
			*i++ = x >> 8;
			*i++ = x;
		}
	}

	if (!this->f64s.empty()) {
		*i++ = uint8_t(17);

		uint_fast32_t x(this->f64s.size());
		while (x >= c32(128)) {
			*i++ = x | c32(128);
			x >>= 7;
		}
		*i++ = x;

		for (auto f : this->f64s) {
			uint_fast64_t x;
			std::memcpy(&x, &f, 8);
			*i++ = x >> 56;
			*i++ = x >> 48;
			*i++ = x >> 40;
			*i++ = x >> 32;
			*i++ = x >> 24;
			*i++ = x >> 16;
			*i++ = x >> 8;
			*i++ = x;
		}
	}

	*i++ = uint8_t(127);

	return size_t(i - offset);
}

std::size_t gen::O::unmarshal(const void* data, std::size_t data_len) {
	// octet pointer navigation
	auto i = reinterpret_cast<const uint8_t*>(data);
	const uint8_t* end = i + data_len;

	uint_fast8_t header(*i++);

	if (header == uint_fast8_t(0)) {
		this->b = true;
		header = *i++;
	}

	if (header == uint_fast8_t(1)) {
		this->u8 = *i++;
		header = *i++;
	}

	if (header == uint_fast8_t(2)) {
		uint_fast16_t x(*i++);
		x <<= 8;
		this->u16 = x | uint_fast16_t(*i++);
		header = *i++;
	} else if (header == uint_fast8_t(2 | 0x80)) {
		this->u16 = *i++;
		header = *i++;
	}

	if (header == uint_fast8_t(3)) {
		// get 32-bit unsigned integer as x
		uint_fast32_t x(*i++);
		const uint_fast32_t seven_bit = 0x7f;
		if (x > seven_bit) {
			x &= seven_bit;
			for (int shift = 7; shift < 21; shift += 7) {
				uint_fast32_t b(*i++);
				if (b <= seven_bit) {
					x |= b << shift;
					break;
				}
				x |= (b & seven_bit) << shift;
			}
		}

		this->u32 = x;
		header = *i++;
	} else if (header == uint_fast8_t(3 | 0x80)) {
		uint_fast32_t x(*i++);
		x <<= 24;
		x |= uint_fast32_t(*i++) << 16;
		x |= uint_fast32_t(*i++) << 8;
		x |= uint_fast32_t(*i++);

		this->u32 = x;
		header = *i++;
	}

	if (header == uint_fast8_t(4)) {
		// get 64-bit unsigned integer as x
		uint_fast64_t x(*i++);
		const uint_fast64_t seven_bit = 0x7f;
		if (x > seven_bit) {
			x &= seven_bit;
			for (int shift = 7; shift < 49; shift += 7) {
				uint_fast64_t b(*i++);
				if (b <= seven_bit) {
					x |= b << shift;
					break;
				}
				x |= (b & seven_bit) << shift;
			}
		}

		this->u64 = x;
		header = *i++;
	} else if (header == uint_fast8_t(4 | 0x80)) {
		uint_fast64_t x(*i++);
		x <<= 56;
		x |= uint_fast64_t(*i++) << 48;
		x |= uint_fast64_t(*i++) << 40;
		x |= uint_fast64_t(*i++) << 32;
		x |= uint_fast64_t(*i++) << 24;
		x |= uint_fast64_t(*i++) << 16;
		x |= uint_fast64_t(*i++) << 8;
		x |= uint_fast64_t(*i++);

		this->u64 = x;
		header = *i++;
	}

	if ((header & uint_fast8_t(0x7f)) == uint_fast8_t(5)) {
		// get 32-bit signed integer as x
		uint_fast32_t x(*i++);
		const uint_fast32_t seven_bit = 0x7f;
		if (x > seven_bit) {
			x &= seven_bit;
			for (int shift = 7; shift < 35; shift += 7) {
				uint_fast32_t b(*i++);
				if (b <= seven_bit) {
					x |= b << shift;
					break;
				}
				x |= (b & seven_bit) << shift;
			}
		}

		if (header & uint_fast8_t(0x80)) x = ~x + 1;
		this->i32 = x;
		header = *i++;
	}

	if ((header & uint_fast8_t(0x7f)) == uint_fast8_t(6)) {
		// get 64-bit signed integer as x
		uint_fast64_t x(*i++);
		const uint_fast64_t seven_bit = 0x7f;
		if (x > seven_bit) {
			x &= seven_bit;
			for (int shift = 7; ; shift += 7) {
				uint_fast64_t b(*i++);
				if (b <= seven_bit || shift == 56) {
					x |= b << shift;
					break;
				}
				x |= (b & seven_bit) << shift;
			}
		}

		if (header & uint_fast8_t(0x80)) x = ~x + 1;
		this->i64 = x;
		header = *i++;
	}

	if (header == uint_fast8_t(7)) {
		// get float as x
		uint_fast32_t x(*i++);
		x <<= 24;
		x |= uint_fast32_t(*i++) << 16;
		x |= uint_fast32_t(*i++) << 8;
		x |= uint_fast32_t(*i++);
		this->f32 = x;
		header = *i++;
	}

	if (header == uint_fast8_t(8)) {
		// get list length len
		typedef std::vector<float>::size_type len_t;
		len_t len(*i++);
		const len_t seven_bit = 0x7f;
		if (len > seven_bit) {
			len &= seven_bit;
			for (std::size_t shift = 7; shift < sizeof(len_t) * CHAR_BIT; shift += std::size_t(7)) {
				len_t o(*i++);
				if (o <= seven_bit) {
					len |= o << shift;
					break;
				}
				len |= (o & seven_bit) << shift;
			}
		}

		auto a = this->f32s;
		a.resize(len);
		for (len_t pos = 0; pos < len; ++pos) {
			// get float as x
			uint_fast32_t x(*i++);
			x <<= 24;
			x |= uint_fast32_t(*i++) << 16;
			x |= uint_fast32_t(*i++) << 8;
			x |= uint_fast32_t(*i++);
			a[pos] = x;
		}
		header = *i++;
	}

	if (header == uint_fast8_t(9)) {
		// get double as x
		uint_fast64_t x(*i++);
		x <<= 56;
		x |= uint_fast64_t(*i++) << 48;
		x |= uint_fast64_t(*i++) << 40;
		x |= uint_fast64_t(*i++) << 32;
		x |= uint_fast64_t(*i++) << 24;
		x |= uint_fast64_t(*i++) << 16;
		x |= uint_fast64_t(*i++) << 8;
		x |= uint_fast64_t(*i++);
		this->f64 = x;
		header = *i++;
	}

	if (header == uint_fast8_t(10)) {
		// get list length len
		typedef std::vector<double>::size_type len_t;
		len_t len(*i++);
		const len_t seven_bit = 0x7f;
		if (len > seven_bit) {
			len &= seven_bit;
			for (std::size_t shift = 7; shift < sizeof(len_t) * CHAR_BIT; shift += std::size_t(7)) {
				len_t o(*i++);
				if (o <= seven_bit) {
					len |= o << shift;
					break;
				}
				len |= (o & seven_bit) << shift;
			}
		}

		auto a = this->f64s;
		a.resize(len);
		for (len_t pos = 0; pos < len; ++pos) {
			// get double as x
			uint_fast64_t x(*i++);
			x <<= 56;
			x |= uint_fast64_t(*i++) << 48;
			x |= uint_fast64_t(*i++) << 40;
			x |= uint_fast64_t(*i++) << 32;
			x |= uint_fast64_t(*i++) << 24;
			x |= uint_fast64_t(*i++) << 16;
			x |= uint_fast64_t(*i++) << 8;
			x |= uint_fast64_t(*i++);
			a[pos] = x;
		}
		header = *i++;
	}

	if (header == uint_fast8_t(11)) {
		uint_fast32_t s(*i++);
		s <<= 24;
		s |= uint_fast32_t(*i++) << 16;
		s |= uint_fast32_t(*i++) << 8;
		s |= uint_fast32_t(*i++);
		uint_fast32_t ns(*i++);
		ns <<= 24;
		ns |= uint_fast32_t(*i++) << 16;
		ns |= uint_fast32_t(*i++) << 8;
		ns |= uint_fast32_t(*i++);
		this->t = std::chrono::seconds(s) + std::chrono::nanoseconds(ns);
		header = *i++;
	} else if (header == uint_fast8_t(11 | 0x80)) {
		uint_fast64_t s(*i++);
		s <<= 56;
		s |= uint_fast64_t(*i++) << 48;
		s |= uint_fast64_t(*i++) << 40;
		s |= uint_fast64_t(*i++) << 32;
		s |= uint_fast64_t(*i++) << 24;
		s |= uint_fast64_t(*i++) << 16;
		s |= uint_fast64_t(*i++) << 8;
		s |= uint_fast64_t(*i++);
		uint_fast32_t ns(*i++);
		ns <<= 24;
		ns |= uint_fast32_t(*i++) << 16;
		ns |= uint_fast32_t(*i++) << 8;
		ns |= uint_fast32_t(*i++);
		this->t = std::chrono::seconds(int64_t(s)) + std::chrono::nanoseconds(ns);
		header = *i++;
	}

	if (header == uint_fast8_t(12)) {
		// get binary octet size n
		typedef std::vector<std::uint8_t>::size_type n_t;
		n_t n(*i++);
		const n_t seven_bit = 0x7f;
		if (n > seven_bit) {
			n &= seven_bit;
			for (std::size_t shift = 7; shift < sizeof(n_t) * CHAR_BIT; shift += std::size_t(7)) {
				n_t o(*i++);
				if (o <= seven_bit) {
					n |= o << shift;
					break;
				}
				n |= (o & seven_bit) << shift;
			}
		}

		// copy binary
		auto a = this->a;
		a.resize(n);
		memcpy(&a[0], i, n);
		i += n;

		header = *i++;
	}

	if (header == uint_fast8_t(13)) {
		// get list length len
		typedef std::vector<std::vector<std::uint8_t> >::size_type len_t;
		len_t len(*i++);
		const len_t seven_bit = 0x7f;
		if (len > seven_bit) {
			len &= seven_bit;
			for (std::size_t shift = 7; shift < sizeof(len_t) * CHAR_BIT; shift += std::size_t(7)) {
				len_t o(*i++);
				if (o <= seven_bit) {
					len |= o << shift;
					break;
				}
				len |= (o & seven_bit) << shift;
			}
		}

		auto list = this->as;
		list.resize(len);
		for (len_t pos = 0; pos < len; ++pos) {
			// get binary octet size n
			typedef std::vector<std::uint8_t>::size_type n_t;
			n_t n(*i++);
			const n_t seven_bit = 0x7f;
			if (n > seven_bit) {
				n &= seven_bit;
				for (std::size_t shift = 7; shift < sizeof(n_t) * CHAR_BIT; shift += std::size_t(7)) {
					n_t o(*i++);
					if (o <= seven_bit) {
						n |= o << shift;
						break;
					}
					n |= (o & seven_bit) << shift;
				}
			}

			// copy binary
			auto a = list[pos];
			a.resize(n);
			memcpy(&a[0], i, n);
			i += n;
		}

		header = *i++;
	}

	if (header == uint_fast8_t(14)) {
		// get text octet size n
		typedef std::vector<std::string>::size_type n_t;
		n_t n(*i++);
		const n_t seven_bit = 0x7f;
		if (n > seven_bit) {
			n &= seven_bit;
			for (std::size_t shift = 7; shift < sizeof(n_t) * CHAR_BIT; shift += std::size_t(7)) {
				n_t o(*i++);
				if (o <= seven_bit) {
					n |= o << shift;
					break;
				}
				n |= (o & seven_bit) << shift;
			}
		}

		// copy text
		this->s.assign((const char*)(i), n);
		i += n;

		header = *i++;
	}

	if (header == uint_fast8_t(15)) {
		// get list length len
		typedef std::vector<std::string>::size_type len_t;
		len_t len(*i++);
		const len_t seven_bit = 0x7f;
		if (len > seven_bit) {
			len &= seven_bit;
			for (std::size_t shift = 7; shift < sizeof(len_t) * CHAR_BIT; shift += std::size_t(7)) {
				len_t o(*i++);
				if (o <= seven_bit) {
					len |= o << shift;
					break;
				}
				len |= (o & seven_bit) << shift;
			}
		}

		auto list = this->ss;
		list.resize(len);
		for (len_t pos = 0; pos < len; ++pos) {
			// get text octet size n
			typedef std::string::size_type n_t;
			n_t n(*i++);
			const n_t seven_bit = 0x7f;
			if (n > seven_bit) {
				n &= seven_bit;
				for (std::size_t shift = 7; shift < sizeof(n_t) * CHAR_BIT; shift += std::size_t(7)) {
					n_t o(*i++);
					if (o <= seven_bit) {
						n |= o << shift;
						break;
					}
					n |= (o & seven_bit) << shift;
				}
			}

			// copy text
			this->s.assign((const char*)(i), n);
			i += n;
		}

		header = *i++;
	}

	if (header == uint_fast8_t(16)) {
		i += this->o->unmarshal(i, end - i);

		header = *i++;
	}

	if (header == uint_fast8_t(17)) {
		// get list length len
		typedef std::vector<O>::size_type len_t;
		len_t len(*i++);
		const len_t seven_bit = 0x7f;
		if (len > seven_bit) {
			len &= seven_bit;
			for (std::size_t shift = 7; shift < sizeof(len_t) * CHAR_BIT; shift += std::size_t(7)) {
				len_t o(*i++);
				if (o <= seven_bit) {
					len |= o << shift;
					break;
				}
				len |= (o & seven_bit) << shift;
			}
		}

		auto list = this->os;
		list.resize(len);
		for (O& x : list) i += x.unmarshal(i, end - i);

		header = *i++;
	}

	return size_t(i - reinterpret_cast<const uint8_t*>(data));
}
