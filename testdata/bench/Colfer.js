// This file was generated by colf(1); DO NOT EDIT

var bench = new function() {
	const EOF = 'colfer: EOF';
	const StructMis = 'colfer: struct header mismatch';
	const UnknownField = 'colfer: unknown field header';

	this.marshalColfer = function(o) {
		var segs = [[128]];

		if (o.key) {
			if (o.key > 9223372036854775807 || o.key < -9223372036854775808)
				throw 'colfer: field "key" overflow: ' + o.key;
			var seg = [4];
			if (o.key < 0) {
				seg[0] |= 128;
				encodeVarint(seg, -o.key);
			} else	encodeVarint(seg, o.key);
			segs.push(seg);
		}

		if (o.host) {
			var utf = encodeUTF8(o.host);
			var seg = [1];
			encodeVarint(seg, utf.length);
			segs.push(seg);
			segs.push(utf)
		}

		if (o.addr) {
			var seg = [2];
			encodeVarint(seg, o.addr.length);
			segs.push(seg);
			segs.push(o.addr);
		}

		if (o.port) {
			if (o.port > 2147483647 || o.port < -2147483648)
				throw 'colfer: field "port" overflow: ' + o.port;
			var seg = [3];
			if (o.port < 0) {
				seg[0] |= 128;
				encodeVarint(seg, -o.port);
			} else	encodeVarint(seg, o.port);
			segs.push(seg);
		}

		if (o.size) {
			if (o.size > 9223372036854775807 || o.size < -9223372036854775808)
				throw 'colfer: field "size" overflow: ' + o.size;
			var seg = [4];
			if (o.size < 0) {
				seg[0] |= 128;
				encodeVarint(seg, -o.size);
			} else	encodeVarint(seg, o.size);
			segs.push(seg);
		}

		if (o.hash) {
			if (o.hash > 18446744073709551616)
				throw 'colfer: field "hash" overflow: ' + o.hash;
			var seg = [5];
			encodeVarint(seg, o.hash);
			segs.push(seg);
		}

		if (o.ratio || Number.isNaN(o.ratio)) {
			var bytes = new Uint8Array(9);
			bytes[0] = 6;
			new DataView(bytes.buffer).setFloat64(1, o.ratio);
			segs.push(bytes);
		}

		if (o.route) {
			segs.push([7]);
		}

		return joinSegs(segs);
	}

	this.unmarshalColfer = function(data) {
		if (!data || ! data.length) return null;
		var i = 0;
		if (data[i++] != 0x80) throw StructMis;

		var readVarint = function() {
			var pos = 0, result = 0;
			while (true) {
				var c = data[i+pos];
				result += (c & 127) * Math.pow(128, pos);
				++pos;
				if (c < 128) {
					i += pos;
					return result;
				}
				if (pos == data.length) throw EOF;
			}
		}

		var o = {};
		if (i == data.length) return o;

		var header = data[i++];
		var field = header & 127;

		if (field == 0) {
			o.key = readVarint();
			if (header & 0x80) o.key *= -1;

			if (i == data.length) return o;
			header = data[i++];
			field = header & 127;
		}

		if (field == 1) {
			var to = readVarint() + i;
			if (to > data.length) throw EOF;
			o.host = decodeUTF8(data.subarray(i, to));
			i = to;

			if (i == data.length) return o;
			header = data[i++];
			field = header & 127;
		}

		if (field == 2) {
			var to = readVarint() + i;
			if (to > data.length) throw EOF;
			o.addr = data.subarray(i, to);
			i = to;

			if (i == data.length) return o;
			header = data[i++];
			field = header & 127;
		}

		if (field == 3) {
			o.port = readVarint();
			if (header & 0x80) o.port *= -1;

			if (i == data.length) return o;
			header = data[i++];
			field = header & 127;
		}

		if (field == 4) {
			o.size = readVarint();
			if (header & 0x80) o.size *= -1;

			if (i == data.length) return o;
			header = data[i++];
			field = header & 127;
		}

		if (field == 5) {
			o.hash = readVarint();

			if (i == data.length) return o;
			header = data[i++];
			field = header & 127;
		}

		if (field == 6) {
			if (data.length < i + 8) throw EOF;
			o.ratio = new DataView(data.buffer).getFloat64(i);
			i += 8;

			if (i == data.length) return o;
			header = data[i++];
			field = header & 127;
		}

		if (field == 7) {
			o.route = true;

			if (i == data.length) return o;
			header = data[i++];
			field = header & 127;
		}

		return UnknownField;
	}

	var joinSegs = function(segs) {
		var size = 0;
		segs.forEach(function(seg) {
			size += seg.length;
		});

		var bytes = new Uint8Array(size);
		var i = 0;
		segs.forEach(function(seg) {
			bytes.set(seg, i);
			i += seg.length;
		});
		return bytes;
	}

	var encodeVarint = function(bytes, x) {
		while (x > 127) {
			bytes.push(x|128);
			x /= 128;
		}
		bytes.push(x&127);
		return bytes;
	}

	// Marshals a string to Uint8Array.
	var encodeUTF8 = function(s) {
		var i = 0;
		var bytes = new Uint8Array(s.length * 4);
		for (var ci = 0; ci != s.length; ci++) {
			var c = s.charCodeAt(ci);
			if (c < 128) {
				bytes[i++] = c;
				continue;
			}
			if (c < 2048) {
				bytes[i++] = c >> 6 | 192;
			} else {
				if (c > 0xd7ff && c < 0xdc00) {
					if (++ci == s.length) throw 'UTF-8 encode: incomplete surrogate pair';
					var c2 = s.charCodeAt(ci);
					if (c2 < 0xdc00 || c2 > 0xdfff) throw 'UTF-8 encode: second char code 0x' + c2.toString(16) + ' at index ' + ci + ' in surrogate pair out of range';
					c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
					bytes[i++] = c >> 18 | 240;
					bytes[i++] = c>> 12 & 63 | 128;
				} else { // c <= 0xffff
					bytes[i++] = c >> 12 | 224;
				}
				bytes[i++] = c >> 6 & 63 | 128;
			}
			bytes[i++] = c & 63 | 128;
		}
		return bytes.subarray(0, i);
	}

	// Unmarshals an Uint8Array to string.
	var decodeUTF8 = function(bytes) {
		var s = '';
		var i = 0;
		while (i < bytes.length) {
			var c = bytes[i++];
			if (c > 127) {
				if (c > 191 && c < 224) {
					if (i >= bytes.length) throw 'UTF-8 decode: incomplete 2-byte sequence';
					c = (c & 31) << 6 | bytes[i] & 63;
				} else if (c > 223 && c < 240) {
					if (i + 1 >= bytes.length) throw 'UTF-8 decode: incomplete 3-byte sequence';
					c = (c & 15) << 12 | (bytes[i] & 63) << 6 | bytes[++i] & 63;
				} else if (c > 239 && c < 248) {
					if (i+2 >= bytes.length) throw 'UTF-8 decode: incomplete 4-byte sequence';
					c = (c & 7) << 18 | (bytes[i] & 63) << 12 | (bytes[++i] & 63) << 6 | bytes[++i] & 63;
				} else throw 'UTF-8 decode: unknown multibyte start 0x' + c.toString(16) + ' at index ' + (i - 1);
				++i;
			}

			if (c <= 0xffff) s += String.fromCharCode(c);
			else if (c <= 0x10ffff) {
				c -= 0x10000;
				s += String.fromCharCode(c >> 10 | 0xd800)
				s += String.fromCharCode(c & 0x3FF | 0xdc00)
			} else throw 'UTF-8 decode: code point 0x' + c.toString(16) + ' exceeds UTF-16 reach';
		}
		return s;
	}
}
