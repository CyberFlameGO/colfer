package testdata;


// This file was generated by colf(1); DO NOT EDIT


import static java.lang.String.format;
import java.util.InputMismatchException;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;


/**
 * Data bean with built-in serialization support.
 * @author generated by colf(1)
 * @see <a href="https://github.com/pascaldekloe/colfer">Colfer's home</a>
 */
public class O implements java.io.Serializable {

	/** The upper limit for serial byte sizes. */
	public static int colferSizeMax = 16 * 1024 * 1024;

	/** The upper limit for the number of elements in a list. */
	public static int colferListMax = 64 * 1024;

	private static final java.nio.charset.Charset _utf8 = java.nio.charset.Charset.forName("UTF-8");
	private static final byte[] _zeroA = new byte[0];
	private static final O[] _zeroOs = new O[0];

	public boolean b;
	public int u32;
	public long u64;
	public int i32;
	public long i64;
	public float f32;
	public double f64;
	public java.time.Instant t;
	public String s = "";
	public byte[] a = _zeroA;
	public O o;
	public O[] os = _zeroOs;


	/**
	 * Serializes the object.
	 * All {@code null} entries in {@link #os} will be replaced with a {@code new} value.
	 * @param buf the data destination.
	 * @param offset the first byte index.
	 * @return the index of the first byte after the last byte written.
	 * @throws BufferOverflowException when {@code buf} is too small.
	 * @throws IllegalStateException on an upper limit breach defined by either {@link #colferSizeMax} or {@link #colferListMax}.
	 */
	public int marshal(byte[] buf, int offset) {
		int i = offset;
		try {
			if (this.b) {
				buf[i++] = (byte) 0;
			}

			if (this.u32 != 0) {
				int x = this.u32;
				if ((x & ~((1 << 21) - 1)) != 0) {
					buf[i++] = (byte) (1 | 0x80);
					buf[i++] = (byte) (x >>> 24);
					buf[i++] = (byte) (x >>> 16);
					buf[i++] = (byte) (x >>> 8);
					buf[i++] = (byte) (x);
				} else {
					buf[i++] = (byte) 1;
					while ((x & ~((1 << 7) - 1)) != 0) {
						buf[i++] = (byte) (x | 0x80);
						x >>>= 7;
					}
					buf[i++] = (byte) x;
				}
			}

			if (this.u64 != 0) {
				long x = this.u64;
				if ((x & ~((1 << 49) - 1)) != 0) {
					buf[i++] = (byte) (2 | 0x80);
					buf[i++] = (byte) (x >>> 56);
					buf[i++] = (byte) (x >>> 48);
					buf[i++] = (byte) (x >>> 40);
					buf[i++] = (byte) (x >>> 32);
					buf[i++] = (byte) (x >>> 24);
					buf[i++] = (byte) (x >>> 16);
					buf[i++] = (byte) (x >>> 8);
					buf[i++] = (byte) (x);
				} else {
					buf[i++] = (byte) 2;
					for (int n = 0; n < 8 && (x & ~((1L << 7) - 1)) != 0; n++) {
						buf[i++] = (byte) (x | 0x80);
						x >>>= 7;
					}
					buf[i++] = (byte) x;
				}
			}

			if (this.i32 != 0) {
				int x = this.i32;
				if (x < 0) {
					x = -x;
					buf[i++] = (byte) (3 | 0x80);
				} else
					buf[i++] = (byte) 3;
				while ((x & ~((1 << 7) - 1)) != 0) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;
			}

			if (this.i64 != 0) {
				long x = this.i64;
				if (x < 0) {
					x = -x;
					buf[i++] = (byte) (4 | 0x80);
				} else
					buf[i++] = (byte) 4;
				for (int n = 0; n < 8 && (x & ~((1L << 7) - 1)) != 0; n++) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;
			}

			if (this.f32 != 0.0f) {
				buf[i++] = (byte) 5;
				int x = Float.floatToRawIntBits(this.f32);
				buf[i++] = (byte) (x >>> 24);
				buf[i++] = (byte) (x >>> 16);
				buf[i++] = (byte) (x >>> 8);
				buf[i++] = (byte) (x);
			}

			if (this.f64 != 0.0) {
				buf[i++] = (byte) 6;
				long x = Double.doubleToRawLongBits(this.f64);
				buf[i++] = (byte) (x >>> 56);
				buf[i++] = (byte) (x >>> 48);
				buf[i++] = (byte) (x >>> 40);
				buf[i++] = (byte) (x >>> 32);
				buf[i++] = (byte) (x >>> 24);
				buf[i++] = (byte) (x >>> 16);
				buf[i++] = (byte) (x >>> 8);
				buf[i++] = (byte) (x);
			}

			if (this.t != null) {
				long s = this.t.getEpochSecond();
				int ns = this.t.getNano();
				if (s != 0 || ns != 0) {
					if (s >= 0 && s < (1L << 32)) {
						buf[i++] = (byte) 7;
						buf[i++] = (byte) (s >>> 24);
						buf[i++] = (byte) (s >>> 16);
						buf[i++] = (byte) (s >>> 8);
						buf[i++] = (byte) (s);
						buf[i++] = (byte) (ns >>> 24);
						buf[i++] = (byte) (ns >>> 16);
						buf[i++] = (byte) (ns >>> 8);
						buf[i++] = (byte) (ns);
					} else {
						buf[i++] = (byte) (7 | 0x80);
						buf[i++] = (byte) (s >>> 56);
						buf[i++] = (byte) (s >>> 48);
						buf[i++] = (byte) (s >>> 40);
						buf[i++] = (byte) (s >>> 32);
						buf[i++] = (byte) (s >>> 24);
						buf[i++] = (byte) (s >>> 16);
						buf[i++] = (byte) (s >>> 8);
						buf[i++] = (byte) (s);
						buf[i++] = (byte) (ns >>> 24);
						buf[i++] = (byte) (ns >>> 16);
						buf[i++] = (byte) (ns >>> 8);
						buf[i++] = (byte) (ns);
					}
				}
			}

			if (! this.s.isEmpty()) {
				buf[i++] = (byte) 8;
				String s = this.s;
				int sLength = s.length();

				int start = ++i;
				for (int sIndex = 0; sIndex < sLength; sIndex++) {
					char c = s.charAt(sIndex);
					if (c < 128) {
						buf[i++] = (byte) c;
					} else if (c < 2048) {
						buf[i++] = (byte) (192 | c >>> 6);
						buf[i++] = (byte) (128 | c & 63);
					} else if (! Character.isSurrogate(c)) {
						buf[i++] = (byte) (224 | c >>> 12);
						buf[i++] = (byte) (128 | c >>> 6 & 63);
						buf[i++] = (byte) (128 | c & 63);
					} else if (++sIndex != sLength) {
						int cp = Character.toCodePoint(c, s.charAt(sIndex));
						buf[i++] = (byte) (240 | cp >>> 18);
						buf[i++] = (byte) (128 | cp >>> 12 & 63);
						buf[i++] = (byte) (128 | cp >>> 6 & 63);
						buf[i++] = (byte) (128 | cp & 63);
					}
				}

				int size = i - start;
				if (size > colferSizeMax)
					throw new IllegalStateException(format("colfer: field testdata.o.s size %d exceeds %d UTF-8 bytes", size, colferSizeMax));

				int shift = 0;
				for (int x = size; (x & ~((1 << 7) - 1)) != 0; x >>>= 7) shift++;
				i = start + shift + size;
				if (shift != 0) System.arraycopy(buf, start, buf, start + shift, size);

				start--;
				while ((size & ~((1 << 7) - 1)) != 0) {
					buf[start++] = (byte) (size | 0x80);
					size >>>= 7;
				}
				buf[start++] = (byte) size;
			}

			if (this.a.length != 0) {
				buf[i++] = (byte) 9;

				int size = this.a.length;
				if (size > colferSizeMax)
					throw new IllegalStateException(format("colfer: field testdata.o.a size %d exceeds %d bytes", size, colferSizeMax));

				int x = size;
				while ((x & ~((1 << 7) - 1)) != 0) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;

				int start = i;
				i += size;
				System.arraycopy(this.a, 0, buf, start, size);
			}

			if (this.o != null) {
				buf[i++] = (byte) 10;
				i = this.o.marshal(buf, i);
			}

			if (this.os.length != 0) {
				buf[i++] = (byte) 11;
				O[] a = this.os;

				int x = a.length;
				if (x > colferListMax)
					throw new IllegalStateException(format("colfer: field testdata.o.os length %d exceeds %d elements", x, colferListMax));
				while ((x & ~((1 << 7) - 1)) != 0) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;

				for (int ai = 0; ai < a.length; ai++) {
					O o = a[ai];
					if (o == null) {
						o = new O();
						a[ai] = o;
					}
					i = o.marshal(buf, i);
				}
			}

			buf[i++] = (byte) 0x7f;
			return i;
		} catch (IndexOutOfBoundsException e) {
			if (i - offset > colferSizeMax)
				throw new IllegalStateException(format("colfer: serial exceeds %d bytes", colferSizeMax));
			if (i >= buf.length)
				throw new BufferOverflowException();
			throw new RuntimeException("colfer: bug", e);
		}
	}

	/**
	 * Deserializes the object.
	 * @param buf the data source.
	 * @param offset the first byte index.
	 * @return the index of the first byte after the last byte read.
	 * @throws BufferUnderflowException when {@code buf} is incomplete. (EOF)
	 * @throws SecurityException on an upper limit breach defined by either {@link #colferSizeMax} or {@link #colferListMax}.
	 * @throws InputMismatchException when the data does not match this object's schema.
	 */
	public int unmarshal(byte[] buf, int offset) {
		int i = offset;
		try {
			byte header = buf[i++];

			if (header == (byte) 0) {
				this.b = true;
				header = buf[i++];
			}

			if (header == (byte) 1) {
				int x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					x |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				this.u32 = x;
				header = buf[i++];
			} else if (header == (byte) (1 | 0x80)) {
				this.u32 = (buf[i++] & 0xff) << 24 | (buf[i++] & 0xff) << 16 | (buf[i++] & 0xff) << 8 | (buf[i++] & 0xff);
				header = buf[i++];
			}

			if (header == (byte) 2) {
				long x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					if (shift == 56 || b >= 0) {
						x |= (b & 0xffL) << shift;
						break;
					}
					x |= (b & 0x7fL) << shift;
				}
				this.u64 = x;
				header = buf[i++];
			} else if (header == (byte) (2 | 0x80)) {
				this.u64 = (buf[i++] & 0xffL) << 56 | (buf[i++] & 0xffL) << 48 | (buf[i++] & 0xffL) << 40 | (buf[i++] & 0xffL) << 32
					| (buf[i++] & 0xffL) << 24 | (buf[i++] & 0xffL) << 16 | (buf[i++] & 0xffL) << 8 | (buf[i++] & 0xffL);
				header = buf[i++];
			}

			if (header == (byte) 3) {
				int x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					x |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				this.i32 = x;
				header = buf[i++];
			} else if (header == (byte) (3 | 0x80)) {
				int x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					x |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				this.i32 = -x;
				header = buf[i++];
			}

			if (header == (byte) 4) {
				long x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					if (shift == 56 || b >= 0) {
						x |= (b & 0xffL) << shift;
						break;
					}
					x |= (b & 0x7fL) << shift;
				}
				this.i64 = x;
				header = buf[i++];
			} else if (header == (byte) (4 | 0x80)) {
				long x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					if (shift == 56 || b >= 0) {
						x |= (b & 0xffL) << shift;
						break;
					}
					x |= (b & 0x7fL) << shift;
				}
				this.i64 = -x;
				header = buf[i++];
			}

			if (header == (byte) 5) {
				int x = (buf[i++] & 0xff) << 24 | (buf[i++] & 0xff) << 16 | (buf[i++] & 0xff) << 8 | (buf[i++] & 0xff);
				this.f32 = Float.intBitsToFloat(x);
				header = buf[i++];
			}

			if (header == (byte) 6) {
				long x = (buf[i++] & 0xffL) << 56 | (buf[i++] & 0xffL) << 48 | (buf[i++] & 0xffL) << 40 | (buf[i++] & 0xffL) << 32
					| (buf[i++] & 0xffL) << 24 | (buf[i++] & 0xffL) << 16 | (buf[i++] & 0xffL) << 8 | (buf[i++] & 0xffL);
				this.f64 = Double.longBitsToDouble(x);
				header = buf[i++];
			}

			if (header == (byte) 7) {
				long s = (buf[i++] & 0xffL) << 24 | (buf[i++] & 0xffL) << 16 | (buf[i++] & 0xffL) << 8 | (buf[i++] & 0xffL);
				long ns = (buf[i++] & 0xffL) << 24 | (buf[i++] & 0xffL) << 16 | (buf[i++] & 0xffL) << 8 | (buf[i++] & 0xffL);
				this.t = java.time.Instant.ofEpochSecond(s, ns);
				header = buf[i++];
			} else if (header == (byte) (7 | 0x80)) {
				long s = (buf[i++] & 0xffL) << 56 | (buf[i++] & 0xffL) << 48 | (buf[i++] & 0xffL) << 40 | (buf[i++] & 0xffL) << 32
					| (buf[i++] & 0xffL) << 24 | (buf[i++] & 0xffL) << 16 | (buf[i++] & 0xffL) << 8 | (buf[i++] & 0xffL);
				long ns = (buf[i++] & 0xffL) << 24 | (buf[i++] & 0xffL) << 16 | (buf[i++] & 0xffL) << 8 | (buf[i++] & 0xffL);
				this.t = java.time.Instant.ofEpochSecond(s, ns);
				header = buf[i++];
			}

			if (header == (byte) 8) {
				int size = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					size |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (size > colferSizeMax)
					throw new SecurityException(format("colfer: field testdata.o.s size %d exceeds %d UTF-8 bytes", size, colferSizeMax));

				int start = i;
				i += size;
				this.s = new String(buf, start, size, this._utf8);
				header = buf[i++];
			}

			if (header == (byte) 9) {
				int size = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					size |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (size > colferSizeMax)
					throw new SecurityException(format("colfer: field testdata.o.a size %d exceeds %d bytes", size, colferSizeMax));

				this.a = new byte[size];
				int start = i;
				i += size;
				System.arraycopy(buf, start, this.a, 0, size);
				header = buf[i++];
			}

			if (header == (byte) 10) {
				this.o = new O();
				i = this.o.unmarshal(buf, i);
				header = buf[i++];
			}

			if (header == (byte) 11) {
				int length = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					length |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (length > colferListMax)
					throw new SecurityException(format("colfer: field testdata.o.os length %d exceeds %d elements", length, colferListMax));

				O[] a = new O[length];
				for (int ai = 0; ai < length; ai++) {
					O o = new O();
					i = o.unmarshal(buf, i);
					a[ai] = o;
				}
				this.os = a;
				header = buf[i++];
			}

			if (header != (byte) 0x7f)
				throw new InputMismatchException(format("colfer: unknown header at byte %d", i - 1));
		} catch (IndexOutOfBoundsException e) {
			if (i - offset > colferSizeMax)
				throw new SecurityException(format("colfer: serial exceeds %d bytes", colferSizeMax));
			if (i >= buf.length)
				throw new BufferUnderflowException();
			throw new RuntimeException("colfer: bug", e);
		}

		if (i - offset > colferSizeMax)
			throw new SecurityException(format("colfer: serial exceeds %d bytes", colferSizeMax));
		return i;
	}

	public boolean getB() {
		return this.b;
	}

	public void setB(boolean value) {
		this.b = value;
	}

	public int getU32() {
		return this.u32;
	}

	public void setU32(int value) {
		this.u32 = value;
	}

	public long getU64() {
		return this.u64;
	}

	public void setU64(long value) {
		this.u64 = value;
	}

	public int getI32() {
		return this.i32;
	}

	public void setI32(int value) {
		this.i32 = value;
	}

	public long getI64() {
		return this.i64;
	}

	public void setI64(long value) {
		this.i64 = value;
	}

	public float getF32() {
		return this.f32;
	}

	public void setF32(float value) {
		this.f32 = value;
	}

	public double getF64() {
		return this.f64;
	}

	public void setF64(double value) {
		this.f64 = value;
	}

	public java.time.Instant getT() {
		return this.t;
	}

	public void setT(java.time.Instant value) {
		this.t = value;
	}

	public String getS() {
		return this.s;
	}

	public void setS(String value) {
		this.s = value;
	}

	public byte[] getA() {
		return this.a;
	}

	public void setA(byte[] value) {
		this.a = value;
	}

	public O getO() {
		return this.o;
	}

	public void setO(O value) {
		this.o = value;
	}

	public O[] getOs() {
		return this.os;
	}

	public void setOs(O[] value) {
		this.os = value;
	}

	@Override
	public final int hashCode() {
		return java.util.Objects.hash(0x7f, b, u32, u64, i32, i64, f32, f64, t, s, a, o, os);
	}

	@Override
	public final boolean equals(Object o) {
		return o instanceof O && equals((O) o);
	}

	public final boolean equals(O o) {
		return o != null
			&& this.b == o.b
			&& this.u32 == o.u32
			&& this.u64 == o.u64
			&& this.i32 == o.i32
			&& this.i64 == o.i64
			&& java.util.Objects.equals(this.f32, o.f32)
			&& java.util.Objects.equals(this.f64, o.f64)
			&& java.util.Objects.equals(this.t, o.t)
			&& java.util.Objects.equals(this.s, o.s)
			&& java.util.Arrays.equals(this.a, o.a)
			&& java.util.Objects.equals(this.o, o.o)
			&& java.util.Arrays.equals(this.os, o.os);
	}

}
